#if 0
#1二叉树
/*
概念：
前序遍历：
访问根结点在访问左子树和访问右子树之前。即先访问根结点，然后遍历左子树，最后遍历右子树；
并且在遍历左子树和右子树时，仍然先访问根结点，然后遍历左子树，最后遍历右子树。 
中序遍历：
访问根结点在访问左子树和访问右子树两者之间。即先遍历左子树，然后访问根结点，最后遍历右子树。
并且在遍历左子树和右子树时，仍然首先遍历左子树，然后访问根结点，最后遍历右子树。 
后序遍历：
访问根结点在访问左子树和访问右子树之后。即首先遍历左子树，然后遍历右子树，最后访问根结点；
并且在遍历左子树和右子树时，仍然首先遍历左子树，然后遍历右子树，最后访问根结点。 
完全二叉树：
是指除最后一层外，每一层上的结点数均达到最大值，在最后一层上只缺少右边的若干结点。
*/

1.已知二叉树后序遍历序列是bfegcda，中序遍历序列是badefcg，它的前序遍历序列是：
A abcdefg
B abdcefg
C adbcfeg
D abecdfg
题目解析：
后序遍历中的最后一个元素是根节点，a，然后查找中序中a的位置，把中序遍历分成
b a defcg，易知左子树为b，右子树为defcg，再递归求解，可画出原始二叉树，故知前序遍历序列为B。

2. 某完全二叉树按层次输出（同一层从左到右）的序列为 ABCDEFGH 。该完全二叉树的前序序列为（A）
A ABDHECFG
B ABCDEFGH
C HDBEAFCG
D HDEBFGCA

#2堆
/*
堆的性质：
堆中某个节点的值总是不大于或不小于其父节点的值；
堆总是一棵完全二叉树。
*/
1.以下序列不是堆的是(D)
A(100, 85, 98, 77, 80, 60, 82, 40, 20, 10, 66)
B(100, 98, 85, 82, 80, 77, 66, 60, 40, 20, 10)
C(10, 20, 40, 60, 66, 77, 80, 82, 85, 98, 100)
D(100, 85, 40, 77, 80, 60, 66, 98, 82, 10, 20)


#3哈希表：？？？
1.设有一组记录的关键字为{ 19,14,23,1,68,20,84,27,55,11,10,79 }, 
用链地址法构造哈希表, 哈希函数为H(key) = key MOD 13, 哈希地址为1的链中有(D)个记录
A 1
B 2
C 3
D 4


#4图
1.下列哪种图的邻接矩阵是对称矩阵（B）。
A 有向图
B 无向图
C AOV图
D AOE图
#endif